name: Build Windows & macOS (Apple Silicon) Release

# Agregar permisos expl√≠citos para el workflow
permissions:
  contents: write
  actions: read
  checks: write
  deployments: write
  pull-requests: write
  repository-projects: write
  statuses: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            build_script: "build:win"
            artifact_name: "linkzone-manager-windows"
          - os: macos-latest
            platform: macos
            build_script: "build:mac"
            artifact_name: "linkzone-manager-macos"
          - os: ubuntu-latest
            platform: linux
            build_script: "build:linux"
            artifact_name: "linkzone-manager-linux"

    steps:
      - name: Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Setup Node.js 16.x
        uses: actions/setup-node@v4
        with:
          node-version: '16.20.2'  # Versi√≥n espec√≠fica m√°s estable
          cache: 'yarn'  # Cache de yarn para velocidad
          
      - name: Setup Python for macOS
        if: matrix.platform == 'macos'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Create Python symlink (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Crear symlink para que electron-builder encuentre python
          sudo ln -sf $(which python3) /usr/bin/python || true
          sudo ln -sf $(which python3) /usr/local/bin/python || true
          # Verificar que python est√© disponible
          python --version || python3 --version
          which python || which python3
          
      - name: Install native dependencies (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Instalar herramientas nativas necesarias para electron-builder
          python3 -m pip install --upgrade setuptools
          # Instalar dmgbuild que puede ser necesario
          python3 -m pip install dmgbuild
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile  # M√°s determinista
        
      - name: Build for ${{ matrix.platform }}
        run: yarn ${{ matrix.build_script }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder
          # Variables espec√≠ficas para macOS Apple Silicon
          CSC_IDENTITY_AUTO_DISCOVERY: ${{ matrix.platform == 'macos' && 'false' || '' }}
          # Usar Python3 expl√≠citamente
          PYTHON: ${{ matrix.platform == 'macos' && 'python3' || '' }}
          npm_config_python: ${{ matrix.platform == 'macos' && 'python3' || '' }}
          npm_config_target_arch: ${{ matrix.platform == 'macos' && 'arm64' || '' }}
          npm_config_target_platform: ${{ matrix.platform == 'macos' && 'darwin' || '' }}
          npm_config_arch: ${{ matrix.platform == 'macos' && 'arm64' || '' }}
          # Forzar compilaci√≥n para Apple Silicon
          ELECTRON_SKIP_BINARY_DOWNLOAD: ${{ matrix.platform == 'macos' && '1' || '' }}
          # Desactivar ciertas caracter√≠sticas problem√°ticas
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: ${{ matrix.platform == 'macos' && 'true' || '' }}
          
      - name: Fallback build for macOS (if first build fails)
        if: failure() && matrix.platform == 'macos'
        run: |
          echo "‚ö†Ô∏è Primera compilaci√≥n fall√≥, intentando con configuraci√≥n simplificada para Apple Silicon..."
          # Limpiar dist anterior
          rm -rf dist || true
          # Crear symlink adicional si no existe
          sudo ln -sf $(which python3) /usr/bin/python || true
          # Verificar Python
          echo "Python version: $(python3 --version)"
          echo "Python path: $(which python3)"
          # Intentar build solo con DMG para ARM64 (Apple Silicon)
          yarn build:mac --arm64
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          npm_config_target_arch: arm64
          PYTHON: python3
          npm_config_python: python3

      - name: Prepare Windows artifacts
        if: matrix.platform == 'windows'
        run: |
          mkdir artifacts
          powershell "Get-ChildItem dist -Filter '*.exe' | Copy-Item -Destination artifacts -ErrorAction SilentlyContinue"
          powershell "Get-ChildItem dist -Filter '*.msi' | Copy-Item -Destination artifacts -ErrorAction SilentlyContinue"
          dir artifacts
          
      - name: Prepare macOS artifacts
        if: matrix.platform == 'macos'
        run: |
          mkdir -p artifacts
          # Copy ZIP files (DMG removed due to Python issues)
          find dist -name "*.zip" -exec cp {} artifacts/ \; 2>/dev/null || true
          # Also copy any .app directory if available
          if [ -d "dist/mac-arm64" ]; then
            echo "Found mac-arm64 directory, creating backup archive..."
            cd dist/mac-arm64
            tar -czf "../../artifacts/LinkZone-Manager-arm64.tar.gz" *.app || true
            cd ../..
          fi
          ls -la artifacts/ || echo "No artifacts found for macOS"
          
      - name: Prepare Linux artifacts
        if: matrix.platform == 'linux'
        run: |
          mkdir -p artifacts
          # Copy AppImage files
          find dist -name "*.AppImage" -exec cp {} artifacts/ \; 2>/dev/null || true
          ls -la artifacts/ || echo "No artifacts found for Linux"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/
          retention-days: 30
          
      - name: List artifacts for manual release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "üéØ Build completed successfully for ${{ matrix.platform }}!"
          echo "üì¶ Artifacts available for download:"
          ${{ matrix.platform == 'windows' && 'dir artifacts' || 'ls -la artifacts' }}
          echo ""
          echo "‚ÑπÔ∏è  To create a release manually:"
          echo "1. Go to GitHub ‚Üí Releases ‚Üí Draft a new release"
          echo "2. Choose tag: ${{ github.ref_name }}"
          echo "3. Upload files from the artifacts above"
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        continue-on-error: true
        with:
          files: "artifacts/*"
          draft: false
          prerelease: contains(github.ref, 'beta') || contains(github.ref, 'alpha')
          generate_release_notes: true
          make_latest: true
          name: "Link Zone Manager ${{ github.ref_name }}"
          body: |
            ## üöÄ Link Zone Manager ${{ github.ref_name }}
            
            ### ÔøΩ Bug Fixes
            - **Tray Icon**: Fixed system tray icon not displaying correctly in production builds
            - **Version Numbers**: Fixed executable filename showing incorrect version (1.0.0) 
            - **Build System**: Corrected file paths for packaged application resources
            
            ### üéØ Improvements  
            - **SMS Conversation**: Enhanced message display with timestamps and scrollable interface
            - **UI/UX**: Fixed modal sizing for better message viewing experience
            - **System Integration**: Improved minimize-to-tray functionality with proper notifications
            
            ### üì¶ Available Downloads:
            
            **Windows (64-bit):**
            - **Setup Installer**: Complete installation with shortcuts and uninstaller
            - **Portable**: Standalone executable, no installation required
            
            **macOS (Apple Silicon M1/M2/M3/M4):**
            - **ZIP**: Application bundle (extract and drag to Applications folder)
            
            **Linux (Universal):**
            - **AppImage**: Universal Linux package, compatible with all distributions
            
            ### üîß System Requirements:
            - **Windows**: Windows 10/11 (64-bit)
            - **macOS**: macOS 11.0+ with Apple Silicon (M1/M2/M3/M4)
            - **Linux**: Any modern Linux distribution with AppImage support
            - **Device**: ETECSA LinkZone router connected to same network
            
            ### üöÄ Quick Start:
            1. Download the appropriate file for your operating system
            2. Install/run the application
            3. Connect to your LinkZone device's WiFi network
            4. Launch Link Zone Manager and start managing your device!
        env:
          GITHUB_TOKEN: ${{ github.token }}
